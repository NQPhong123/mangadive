const functions = require("firebase-functions");
const admin = require("firebase-admin");
const crypto = require("crypto");
const qs = require("querystring");

admin.initializeApp();
const db = admin.firestore();

// Thay secret b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c t·ª´ VNPAY
const VNP_HASH_SECRET = "LI827NY66IJDKCKUEJ7XK0A3AUF0X2ME";

// H√†m x·ª≠ l√Ω callback t·ª´ VNPAY
exports.vnpayReturn = functions.https.onRequest(async (req, res) => {
  // Debug method v√† tham s·ªë g·ªëc
  console.log("üî• Method:", req.method);

  // 1. Thu th·∫≠p params t·ª´ GET ho·∫∑c POST
  let vnpParams = {};
  if (req.method === "GET") {
    console.log("üî• Callback params (GET):", req.query);
    vnpParams = { ...req.query };
  } else if (req.method === "POST") {
    const rawBody = req.rawBody ? req.rawBody.toString() : "";
    console.log("üî• Raw callback body:", rawBody);
    vnpParams = qs.parse(rawBody);
    console.log("üî• Callback params (POST):", vnpParams);
  } else {
    return res.status(405).send("Method Not Allowed");
  }

  // 2. L·∫•y gi√° tr·ªã SecureHash v√† x√≥a hai field kh·ªèi object
  const vnpSecureHash = vnpParams.vnp_SecureHash;
  const vnpSecureHashType = (
    vnpParams.vnp_SecureHashType || "SHA512"
  ).toString();
  console.log("üîç vnp_SecureHashType:", vnpSecureHashType);

  delete vnpParams.vnp_SecureHash;
  delete vnpParams.vnp_SecureHashType;

  // 3. T·∫°o chu·ªói signData
  const signData = Object.keys(vnpParams)
    .sort()
    .map((key) => `${key}=${vnpParams[key]}`)
    .join("&");
  console.log("‚úÖ signData:", signData);

  // 4. Ch·ªçn thu·∫≠t to√°n HMAC d·ª±a tr√™n SecureHashType
  const algorithm = vnpSecureHashType === "SHA256" ? "sha256" : "sha512";
  console.log("‚úÖ Algorithm used:", algorithm);

  // 5. T√≠nh to√°n checksum
  const hmac = crypto.createHmac(algorithm, VNP_HASH_SECRET);
  const signed = hmac.update(signData, "utf8").digest("hex");
  console.log("‚úÖ Your signed:", signed);
  console.log("‚úÖ VNPay vnp_SecureHash:", vnpSecureHash);

  // 6. So s√°nh checksum (ignore case)
  if (!vnpSecureHash || signed.toLowerCase() !== vnpSecureHash.toLowerCase()) {
    console.error("‚ÄºÔ∏è Checksum mismatch");
    return res.status(400).send("Checksum kh√¥ng h·ª£p l·ªá...");
  }

  // 7. X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n
  const responseCode = vnpParams.vnp_ResponseCode;
  const txnRef = vnpParams.vnp_TxnRef;
  const amountVND = parseInt(vnpParams.vnp_Amount, 10) / 100;

  if (responseCode === "00") {
    // C·∫≠p nh·∫≠t Firestore trong transaction
    try {
      const orderRef = db.collection("vnpay_orders").doc(txnRef);
      const orderSnap = await orderRef.get();
      if (!orderSnap.exists) {
        return res.status(404).send("Order kh√¥ng t·ªìn t·∫°i");
      }
      const { uid } = orderSnap.data();
      const userRef = db.collection("users").doc(uid);

      await db.runTransaction(async (tx) => {
        const userSnap = await tx.get(userRef);
        const prevCoin = userSnap.data()?.mangaCoin ?? 0;
        const addCoin = Math.floor(amountVND / 1000);
        tx.update(userRef, { mangaCoin: prevCoin + addCoin });
        tx.update(orderRef, { status: "SUCCESS" });
      });

      return res.send("Thanh to√°n th√†nh c√¥ng");
    } catch (e) {
      console.error(e);
      return res.status(500).send("L·ªói server khi c·∫≠p nh·∫≠t d·ªØ li·ªáu");
    }
  } else {
    // Giao d·ªãch kh√¥ng th√†nh c√¥ng
    await db
      .collection("vnpay_orders")
      .doc(txnRef)
      .update({ status: "FAILED" });
    return res.send(`Thanh to√°n th·∫•t b·∫°i: m√£ ${responseCode}`);
  }
});
